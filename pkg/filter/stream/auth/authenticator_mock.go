// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Administrator\Desktop\mosn\pkg\filter\stream\auth\authenticator.go

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "mosn.io/api"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticator) Authenticate(headers api.HeaderMap, requestArg string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", headers, requestArg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Authenticate indicates an expected call of Verify.
func (mr *MockAuthenticatorMockRecorder) Authenticate(headers, requestArg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticator)(nil).Authenticate), headers, requestArg)
}
